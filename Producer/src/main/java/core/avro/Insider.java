/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package core.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Insider extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7594786021130731825L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Insider\",\"namespace\":\"core.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"quantityOwnedFollowingTransaction\",\"type\":[{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"scale\":0,\"precision\":10},\"null\"]},{\"name\":\"transactionDate\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Insider> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Insider> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Insider> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Insider> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Insider> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Insider to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Insider from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Insider instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Insider fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  public java.lang.String id;
  public java.math.BigDecimal quantityOwnedFollowingTransaction;
  public java.time.LocalDate transactionDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Insider() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param quantityOwnedFollowingTransaction The new value for quantityOwnedFollowingTransaction
   * @param transactionDate The new value for transactionDate
   */
  public Insider(java.lang.String id, java.math.BigDecimal quantityOwnedFollowingTransaction, java.time.LocalDate transactionDate) {
    this.id = id;
    this.quantityOwnedFollowingTransaction = quantityOwnedFollowingTransaction;
    this.transactionDate = transactionDate;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return quantityOwnedFollowingTransaction;
    case 2: return transactionDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: quantityOwnedFollowingTransaction = (java.math.BigDecimal)value$; break;
    case 2: transactionDate = (java.time.LocalDate)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'quantityOwnedFollowingTransaction' field.
   * @return The value of the 'quantityOwnedFollowingTransaction' field.
   */
  public java.math.BigDecimal getQuantityOwnedFollowingTransaction() {
    return quantityOwnedFollowingTransaction;
  }


  /**
   * Sets the value of the 'quantityOwnedFollowingTransaction' field.
   * @param value the value to set.
   */
  public void setQuantityOwnedFollowingTransaction(java.math.BigDecimal value) {
    this.quantityOwnedFollowingTransaction = value;
  }

  /**
   * Gets the value of the 'transactionDate' field.
   * @return The value of the 'transactionDate' field.
   */
  public java.time.LocalDate getTransactionDate() {
    return transactionDate;
  }


  /**
   * Sets the value of the 'transactionDate' field.
   * @param value the value to set.
   */
  public void setTransactionDate(java.time.LocalDate value) {
    this.transactionDate = value;
  }

  /**
   * Creates a new Insider RecordBuilder.
   * @return A new Insider RecordBuilder
   */
  public static core.avro.Insider.Builder newBuilder() {
    return new core.avro.Insider.Builder();
  }

  /**
   * Creates a new Insider RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Insider RecordBuilder
   */
  public static core.avro.Insider.Builder newBuilder(core.avro.Insider.Builder other) {
    if (other == null) {
      return new core.avro.Insider.Builder();
    } else {
      return new core.avro.Insider.Builder(other);
    }
  }

  /**
   * Creates a new Insider RecordBuilder by copying an existing Insider instance.
   * @param other The existing instance to copy.
   * @return A new Insider RecordBuilder
   */
  public static core.avro.Insider.Builder newBuilder(core.avro.Insider other) {
    if (other == null) {
      return new core.avro.Insider.Builder();
    } else {
      return new core.avro.Insider.Builder(other);
    }
  }

  /**
   * RecordBuilder for Insider instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Insider>
    implements org.apache.avro.data.RecordBuilder<Insider> {

    private java.lang.String id;
    private java.math.BigDecimal quantityOwnedFollowingTransaction;
    private java.time.LocalDate transactionDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(core.avro.Insider.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.quantityOwnedFollowingTransaction)) {
        this.quantityOwnedFollowingTransaction = data().deepCopy(fields()[1].schema(), other.quantityOwnedFollowingTransaction);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.transactionDate)) {
        this.transactionDate = data().deepCopy(fields()[2].schema(), other.transactionDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Insider instance
     * @param other The existing instance to copy.
     */
    private Builder(core.avro.Insider other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantityOwnedFollowingTransaction)) {
        this.quantityOwnedFollowingTransaction = data().deepCopy(fields()[1].schema(), other.quantityOwnedFollowingTransaction);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactionDate)) {
        this.transactionDate = data().deepCopy(fields()[2].schema(), other.transactionDate);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public core.avro.Insider.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public core.avro.Insider.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantityOwnedFollowingTransaction' field.
      * @return The value.
      */
    public java.math.BigDecimal getQuantityOwnedFollowingTransaction() {
      return quantityOwnedFollowingTransaction;
    }


    /**
      * Sets the value of the 'quantityOwnedFollowingTransaction' field.
      * @param value The value of 'quantityOwnedFollowingTransaction'.
      * @return This builder.
      */
    public core.avro.Insider.Builder setQuantityOwnedFollowingTransaction(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.quantityOwnedFollowingTransaction = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantityOwnedFollowingTransaction' field has been set.
      * @return True if the 'quantityOwnedFollowingTransaction' field has been set, false otherwise.
      */
    public boolean hasQuantityOwnedFollowingTransaction() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantityOwnedFollowingTransaction' field.
      * @return This builder.
      */
    public core.avro.Insider.Builder clearQuantityOwnedFollowingTransaction() {
      quantityOwnedFollowingTransaction = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionDate' field.
      * @return The value.
      */
    public java.time.LocalDate getTransactionDate() {
      return transactionDate;
    }


    /**
      * Sets the value of the 'transactionDate' field.
      * @param value The value of 'transactionDate'.
      * @return This builder.
      */
    public core.avro.Insider.Builder setTransactionDate(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.transactionDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionDate' field has been set.
      * @return True if the 'transactionDate' field has been set, false otherwise.
      */
    public boolean hasTransactionDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transactionDate' field.
      * @return This builder.
      */
    public core.avro.Insider.Builder clearTransactionDate() {
      transactionDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Insider build() {
      try {
        Insider record = new Insider();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.quantityOwnedFollowingTransaction = fieldSetFlags()[1] ? this.quantityOwnedFollowingTransaction : (java.math.BigDecimal) defaultValue(fields()[1]);
        record.transactionDate = fieldSetFlags()[2] ? this.transactionDate : (java.time.LocalDate) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Insider>
    WRITER$ = (org.apache.avro.io.DatumWriter<Insider>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Insider>
    READER$ = (org.apache.avro.io.DatumReader<Insider>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










